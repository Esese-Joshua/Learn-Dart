Introduction:
    In this section, you will learn about factory constructors with examples. Before learning about factory constructors, you should have a basic understanding of class and objects, constructor, abstract class, interface and inheritance in Dart.


Factory Constructor In Dart:
    All of the constructors that you have learned until now are generative constructors. Dart also provides a special type of constructor called a factory constructor.

    A factory constructor gives more flexibility to create an object. Generative constructors only create an instance of the class. But, the factory constructor can return an instance of the class or even subclass. It is also used to return the cached instance of the class.

    Syntax:
        class ClassName {
            factory ClassName() {
                // TODO: return ClassName instance
            }

            factory ClassName.namedConstructor() {
                // TODO: return ClassName instance
            }
        }


Rules For Factory Constructors:
    - Factory constructor must return an instance of the class or sub-class.
    - You can’t use this keyword inside factory constructor.
    - It can be named or unnamed and called like normal constructor.
    - It can’t access instance members of the class.


Example 1: Without Factory Constructor
    In this example below, there is a class named Area with final properties length and breadth, and area. When you pass the length and breadth to the constructor, it calculates the area and stores it in the area property.

    Note: An initializer list allows you to assign properties to a new instance variable before the constructor body runs, but after creation.


    class Area {
        final int length;
        final int breadth;
        final int area;

        // Initializer list 
        const Area(this.length, this.breadth) : area = length * breadth;
        }

    void main() {
        Area area = Area(10, 20);
        print("Area is: ${area.area}");

        // notice that here is a negative value
        Area area2 = Area(-10, 20);
        print("Area is: ${area2.area}");
    }

    Here area2 object has a negative value. This is because we are not validating the input. Let’s create a factory constructor to validate the input.


Example 2: With Factory Constructor
    In this example below, factory constructor is used to validate the input. If the input is valid, it will return a new class instance. If the input is invalid, then it will throw an exception.


    class Area {
        final int length;
        final int breadth;
        final int area;

        // private constructor
        const Area._internal(this.length, this.breadth) : area = length * breadth;

        // Factory constructor
        factory Area(int length, int breadth) {
            if (length < 0 || breadth < 0) {
            throw Exception("Length and breadth must be positive");
            }
            // redirect to private constructor
            return Area._internal(length, breadth);
        }
    }

    void main() {
        // This works
        Area area = Area(10, 20);
        print("Area is: ${area.area}");

        // notice that here is negative value
        Area area2 = Area(-10, 20);
        print("Area is: ${area2.area}");
    }

Note: With a factory constructor, you can initialize a final variable using logic that can’t be handled in the initializer list.

