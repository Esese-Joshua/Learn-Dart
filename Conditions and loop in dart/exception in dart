Exception In Dart:
    An exception is an error that occurs at runtime during program execution. When the exception occurs, the flow of the program is interrupted, and the program terminates abnormally. There is a high chance of crashing or terminating the program when an exception occurs. Therefore, to save your program from crashing, you need to catch the exception.

Note: If you are attempting a task that might result in an error, itâ€™s a good habit to use the try-catch statement.

Syntax:
    try {
    // Your Code Here
    }
    catch(ex){
    // Exception here
    }


Example 1: 
    Try Catch In Dart:
        In this example, you will see how to handle the exception using the try-catch block.

            void main() {   
            int a = 18;   
            int b = 0;   
            int res;    
                
            try {    
                res = a ~/ b;
                print("Result is $res");   
            }    
                // It returns the built-in exception related to the occurring exception  
            catch(ex) {   
                print(ex);   
                }   
            }  


            Show Output
            IntegerDivisionByZeroException


Finally In Dart Try Catch:  
    The finally block is always executed whether the exceptions occur or not. It is optional to include the final block, but if it is included, it should be after the try and catch block is over.

On block is used when you know what types of exceptions are produced by the program.

    Example 2: 
    In this example, you will see how to handle the exception using the try-catch block with the finally block.

        void main() {
        int a = 12;
        int b = 0;
        int res;
        try {
            res = a ~/ b;
        } on UnsupportedError {
            print('Cannot divide by zero');
        } catch (ex) {
            print(ex);
        } finally {
            print('Finally block always executed');
        }
        }


Why Is Exception Handling Needed?
    Exceptions provide the means to separate the details of what to do when something out of the ordinary happens from the main logic of a program. Therefore, exceptions must be handled to prevent the application from unexpected termination. Here are some reasons why exception handling is necessary:

    - To avoid abnormal termination of the program.
    - To avoid an exception caused by logical error.
    - To avoid the program from falling apart when an exception occurs.
    - To reduce the vulnerability of the program.
    - To maintain a good user experience.
    - To try providing aid and some debugging in case of an exception.


How To Create Custom Exception In Dart:
    As you go advance, you need to create your exception; Dart enables you to create your exception.

    Syntax;
        class YourExceptionClass implements Exception{
        // constructors, variables & methods
        }


Example 5: 
How to Create & Handle Exception:
    This program throws an exception when you find the square root of a negative number.

        import 'dart:math';

        // custom exception class
        class NegativeSquareRootException implements Exception {
        @override
        String toString() {
            return 'Sqauare root of negative number is not allowed here.';
        }
        }

        // get square root of a positive number
        num squareRoot(int i) {
        if (i < 0) {
            // throw `NegativeSquareRootException` exception
            throw NegativeSquareRootException();
        } else {
            return sqrt(i);
        }
        }

        void main() {
        try {
            var result = squareRoot(-4);

            print("result: $result");
        } on NegativeSquareRootException catch (e) {
            print("Oops, Negative Number: $e");
        } catch (e) {
            print(e);
        } finally {
            print('Job Completed!');
        }
        }

        Show Output:
        Oops, Negative Number: Sqauare root of negative number is not allowed here.
        Job Completed!

        